What is efficiency in programming?


Time Efficiency:

Maanlo hum google par gaye aur humne daala Maharashtra. To google crores and crores of webpages ko search karega jaha par 
Maharashtra Keyword mentioned ho.
Ab google kya krta hai ki bahut saare webpages milne ke baad usko sort karta hai. 
is basis par ke jo web pages hum dikha rahe hai vo relevant hai bhi ya nahi.

aur ye pura kaam google 1 second se kam mey kar leta hai.
ye karne ke liye google ek algorithm use karta hai jise kehte hai page rank.
agar google itna efficient nahi hota to usey koi use nahi karta and is se google ko crores ka nuksaan ho jaata 

isiliye time complexity bohot important hai.

Space Efficiency:

Bahut saare companies apne apps ke lite versions laate hai market mey
vo isiliye kyuki kaafi saare consumers ke device specs kaafi kam hote hai(2 gb ram/ 32 gb storage etc).
iske chlte vo log in companies ke heavy apps nahi chala paate hai.
to companies ko yeh baat samajhti hai ki unka user base jaa rha hai.
to apne users ko apne app par continue rakhne ke liye companies chote versions nikaalte hai app ke
isiliye space complexity bahut important hai.



Techniques to measure Time Efficiency:

1. Measuring time to execute: sidhe sidhe ghadi laga kr time count kar lo

eg: maanlo hume pata karna hai ki 1 se le kar 100 print karne mey kitna time lagta hai

import time

start = time.time()
for i in range(1,101):
    print(i)

print(time.time() - start)

isme hoga kya ki jo bhi time laga hoga vo output mey aa jaayega.

But this approach has few problems:
    Different time for different algorithm 
    Time Variees if implementation changes 
    Different machines different time
    Does not work for extremely small input
    Time varies for different inputs, but can't establish a relationship



2. Counting operations involved:

def c_to_f(c):
    return c*9.0/5 + 32

def mysum(x):
    total = 0
    for i in range(x+1):
        total += i
    return total


    Assume these steps take constant time:
        Mathematical operations
        Comparisons
        assignments
        accessing objects in memory
    
    Then count the number of operations executed as function of size of input

3. Abstract notion of order of growth

    We want to evaluate the algorithm
    We want to evaluate scalability
    We want to evaluate in terms of input size



    Different inputs changes how the program runs:

    - a function that searches for an element in a List
    
        def search_for_element(L, e):
            for i in L:
                if i == e:
                    return True
            return False

    - When e is FIRST ELEMENT in the list -> Best case
    - When e is NOT IN LIST -> Worst case
    - When LOOK THROUGH ABOUT HALF of the elements in the listy -> Average case

    Orders of Growth:
        Goals:

        Want ot evaluate program's efficiency when INPUT IS VERY BIG
        
        Want to express the GROWTH OF PROGRAM'S RUN TIME as input size grows

        Want to put an UPPER BOUND on growth - as tight as possible

        Do not need to be precise: "ORDER OF" NOT "EXACT" growth

        We will look at LARGEST FACTORS in run time(which section of the program will take the longest to run?)

        THUS, GENERALLY WE WANT TIGHT UPPER BOUND ON GROWTH, AS FUNCTION OF SIZE OF INPUT, IN WORST CASE 

    
    MEASURING ORDER OF GROWTH: BIG OH NOTATION

        Big Oh notation measures an UPPER BOUND ON THE ASYMPTOTIC GROWTH, often called order of growth.

        BIG OH OR O() is used to describe worst case occurs often and is the bottleneck when a program runs.

        Express the rate of growth of program relative to the input size

        Evaluate algorithm NOT machine or implementation.


        eg: n^2 + 2n + 2 ek equation militime complexity calculate karne ke baad

        ab pehli cheez kya karni hai ki additive constants uda to

        to eqn will be: n^2 + 2n

        next kya kro ki multiplicative constants uda Do

        to eqn will be: n^2 + n  => time complexity is O(n^2)

        eg 2: n^2 + 100000n + 3^1000    => time complexity is O(n^2)

        eg 3: log(n) + n + 4  => n is greater than log(n) => time complexity is O(n)

        eg4: 0.0001*n*log(n) + 300n => constants hatne ke baad agar bohot bade number ke liye socha jaaye 
        to n*log(n) , n se bada rahega => implies the time complexity is O(n*log(n))

        eg5: 2n^30 + 3^n => yaha 3^n bade number ke liye humesha n^30 se bada hoga isiliye 
        time complexity hogi O(3^n)

    Graph Types of Order of growth will always be one of these six types:

        Constant
        Linear
        Quadratic
        Logarithmic
        n log n
        Exponential

        in graphs mey x axis par input rahega and
        y axis par rahega time taken by the program


